if(MPPP_BENCHMARK_BOOST)
  find_package(Boost 1.55.0 REQUIRED)
endif()

if(MPPP_BENCHMARK_FLINT)
  find_package(FLINT REQUIRED)
endif()

function(ADD_MPPP_BENCHMARK arg1)
    add_executable(${arg1} ${arg1}.cpp)
    target_link_libraries(${arg1} mp++)
    if(MPPP_BENCHMARK_BOOST)
      target_link_libraries(${arg1} Boost::boost)
      target_compile_options(${arg1} PRIVATE "-DMPPP_BENCHMARK_BOOST")
    endif()
    if(MPPP_BENCHMARK_FLINT)
      target_link_libraries(${arg1} FLINT::FLINT)
      target_compile_options(${arg1} PRIVATE "-DMPPP_BENCHMARK_FLINT")
    endif()
    target_include_directories(${arg1} PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
    target_compile_options(${arg1} PRIVATE "$<$<CONFIG:DEBUG>:${MPPP_CXX_FLAGS_DEBUG}>" "$<$<CONFIG:RELEASE>:${MPPP_CXX_FLAGS_DEBUG_RELEASE}>")
    if(YACMA_COMPILER_IS_MSVC)
        # Disable the idiotic minmax macros on MSVC, some annoying warnings,
        # and enable the bigobj option.
        target_compile_options(${arg1} PRIVATE "-DNOMINMAX" "/wd4459" "/wd4127" "/bigobj")
        if(MPPP_MSVC_STATIC_RUNTIME)
            target_compile_options(${arg1} PRIVATE "$<$<CONFIG:DEBUG>:-MTd>" "$<$<CONFIG:RELEASE>:-MT>")
        endif()
    endif()
    if(YACMA_COMPILER_IS_INTELXX)
        # NOTE: on MSVC we use the push/pop pragmas, but they do not seem to work on Intel (the pragmas
        # in icc influence the behaviour at instantiation point, not at definition point).
        target_compile_options(${arg1} PRIVATE "-diag-disable" "3373,1682")
    endif()
    if(MINGW)
        # In MinGW some tests generate big object files.
      target_compile_options(${arg1} PRIVATE "-Wa,-mbig-obj")
    endif()
    set_property(TARGET ${arg1} PROPERTY CXX_STANDARD 11)
    set_property(TARGET ${arg1} PROPERTY CXX_STANDARD_REQUIRED YES)
    set_property(TARGET ${arg1} PROPERTY CXX_EXTENSIONS NO)
endfunction()

ADD_MPPP_BENCHMARK(bench_dot_product_1)
ADD_MPPP_BENCHMARK(bench_dot_product_2)
ADD_MPPP_BENCHMARK(bench_dot_product_3)
ADD_MPPP_BENCHMARK(bench_vec_mul_1)
ADD_MPPP_BENCHMARK(bench_vec_mul_2)
ADD_MPPP_BENCHMARK(bench_vec_mul_3)
