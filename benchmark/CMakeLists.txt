include(YACMACompilerLinkerSettings)

if(MPPP_BENCHMARK_BOOST)
  find_package(Boost 1.55.0 REQUIRED)
endif()

if(MPPP_BENCHMARK_FLINT)
  find_package(FLINT REQUIRED)
endif()

function(ADD_MPPP_BENCHMARK arg1)
    add_executable(${arg1} ${arg1}.cpp)
    target_link_libraries(${arg1} mp++)
    if(MPPP_BENCHMARK_BOOST)
      target_link_libraries(${arg1} Boost::boost)
      target_compile_options(${arg1} PUBLIC "-DMPPP_BENCHMARK_BOOST")
    endif()
    if(MPPP_BENCHMARK_FLINT)
      target_link_libraries(${arg1} FLINT::FLINT)
      target_compile_options(${arg1} PUBLIC "-DMPPP_BENCHMARK_FLINT")
    endif()
    target_include_directories(${arg1} PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
    target_compile_options(${arg1} PUBLIC "$<$<CONFIG:DEBUG>:${YACMA_CXX_FLAGS_DEBUG}>" "$<$<CONFIG:RELEASE>:${YACMA_CXX_FLAGS}>")
    if(YACMA_COMPILER_IS_MSVC)
        target_compile_options(${arg1} PUBLIC "-DNOMINMAX" "/wd4459" "/wd4127" "/bigobj")
    endif()
    if(MPPP_MSVC_STATIC_RUNTIME)
        target_compile_options(${arg1} PUBLIC "$<$<CONFIG:DEBUG>:-MTd>" "$<$<CONFIG:RELEASE>:-MT>")
    endif()
    set_property(TARGET ${arg1} PROPERTY CXX_STANDARD 11)
    set_property(TARGET ${arg1} PROPERTY CXX_STANDARD_REQUIRED YES)
    set_property(TARGET ${arg1} PROPERTY CXX_EXTENSIONS NO)
endfunction()

# ADD_MPPP_BENCHMARK(bench_add_1)
# ADD_MPPP_BENCHMARK(bench_add_2)
# ADD_MPPP_BENCHMARK(bench_add_3)
# ADD_MPPP_BENCHMARK(bench_addmul_1)
# ADD_MPPP_BENCHMARK(bench_addmul_2)
# ADD_MPPP_BENCHMARK(bench_addmul_3)
ADD_MPPP_BENCHMARK(bench_fp_construction_1)
ADD_MPPP_BENCHMARK(bench_fp_construction_2)
ADD_MPPP_BENCHMARK(bench_fp_construction_3)
ADD_MPPP_BENCHMARK(bench_int_construction_1)
ADD_MPPP_BENCHMARK(bench_int_construction_2)
ADD_MPPP_BENCHMARK(bench_int_construction_3)
ADD_MPPP_BENCHMARK(bench_int_conversion_1)
ADD_MPPP_BENCHMARK(bench_int_conversion_2)
ADD_MPPP_BENCHMARK(bench_int_conversion_3)
# ADD_MPPP_BENCHMARK(bench_mul_1)
# ADD_MPPP_BENCHMARK(bench_mul_2)
# ADD_MPPP_BENCHMARK(bench_mul_3)
# ADD_MPPP_BENCHMARK(bench_div_1)
# ADD_MPPP_BENCHMARK(bench_div_2)
# ADD_MPPP_BENCHMARK(bench_div_3)
# ADD_MPPP_BENCHMARK(bench_lshift_1)
# ADD_MPPP_BENCHMARK(bench_lshift_2)
# ADD_MPPP_BENCHMARK(bench_lshift_3)
# ADD_MPPP_BENCHMARK(bench_rshift_1)
# ADD_MPPP_BENCHMARK(bench_rshift_2)
# ADD_MPPP_BENCHMARK(bench_rshift_3)
# ADD_MPPP_BENCHMARK(bench_cmp_1)
# ADD_MPPP_BENCHMARK(bench_cmp_2)
# ADD_MPPP_BENCHMARK(bench_cmp_3)
# ADD_MPPP_BENCHMARK(bench_ctor_dtor_1)
# ADD_MPPP_BENCHMARK(bench_ctor_dtor_2)
# ADD_MPPP_BENCHMARK(bench_ctor_dtor_3)
# ADD_MPPP_BENCHMARK(bench_conversions)
