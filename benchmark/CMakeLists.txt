# Nonius needs support for threading.
set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)
unset(THREADS_PREFER_PTHREAD_FLAG)

# Nonius also depends on Boost.
find_package(Boost REQUIRED)

macro(ADD_MPPP_BENCHMARK arg1)
    add_executable(${arg1} ${arg1}.cpp)
    target_link_libraries(${arg1} mp++ Threads::Threads Boost::boost)
    target_include_directories(${arg1} PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
    target_compile_options(${arg1} PUBLIC "$<$<CONFIG:DEBUG>:${YACMA_CXX_FLAGS_DEBUG}>")
    target_compile_options(${arg1} PUBLIC "$<$<CONFIG:RELEASE>:${YACMA_CXX_FLAGS}>")
    if(MSVC)
        # Disable the idiotic minmax macros on MSVC.
        target_compile_options(${arg1} PUBLIC "-DNOMINMAX")
    endif()
    set_property(TARGET ${arg1} PROPERTY CXX_STANDARD 11)
    set_property(TARGET ${arg1} PROPERTY CXX_STANDARD_REQUIRED YES)
    set_property(TARGET ${arg1} PROPERTY CXX_EXTENSIONS NO)
endmacro()

ADD_MPPP_BENCHMARK(bench_add_1)
ADD_MPPP_BENCHMARK(bench_add_2)
ADD_MPPP_BENCHMARK(bench_add_3)
ADD_MPPP_BENCHMARK(bench_addmul_1)
ADD_MPPP_BENCHMARK(bench_addmul_2)
ADD_MPPP_BENCHMARK(bench_addmul_3)
ADD_MPPP_BENCHMARK(bench_mul_1)
ADD_MPPP_BENCHMARK(bench_mul_2)
ADD_MPPP_BENCHMARK(bench_mul_3)
ADD_MPPP_BENCHMARK(bench_div_1)
ADD_MPPP_BENCHMARK(bench_div_2)
ADD_MPPP_BENCHMARK(bench_div_3)
ADD_MPPP_BENCHMARK(bench_constructors)
ADD_MPPP_BENCHMARK(bench_conversions)
