version: '{build}'

branches:
  except:
    - /pr\/.+/

environment:
  global:
    PLATFORMTOOLSET: "v140"

  matrix:
    # - BUILD_TYPE: Debug
    #   COMPILER: MSVC15
    #   PLATFORM: Win32
    # - BUILD_TYPE: Debug
    #   COMPILER: MSVC15
    #   PLATFORM: x64
    - COMPILER: MSVC15Clang64
    # - BUILD_TYPE: Debug
    #   COMPILER: MinGW
    #   PLATFORM: x64

install:
# Set path and download deps for MSVC.
- if [%COMPILER%]==[MSVC15] set PATH=C:\Program Files (x86)\MSBuild\14.0\Bin;%PATH%
- if [%COMPILER%]==[MSVC15] if [%PLATFORM%]==[x64] call tools\appveyor-download.cmd https://github.com/bluescarni/binary_deps/raw/master/mpir_msvc15_64.7z
- if [%COMPILER%]==[MSVC15] if [%PLATFORM%]==[Win32] call tools\appveyor-download.cmd https://github.com/bluescarni/binary_deps/raw/master/mpir_msvc15_32.7z
- if [%COMPILER%]==[MSVC15] if [%PLATFORM%]==[x64] 7z x -oC:\ mpir_msvc15_64.7z > NUL
- if [%COMPILER%]==[MSVC15] if [%PLATFORM%]==[Win32] 7z x -oC:\ mpir_msvc15_32.7z > NUL

- if [%BUILD_TYPE%]==[MSVC15Clang64] set PATH=C:\Miniconda36-x64\Scripts;%PATH%
- if [%BUILD_TYPE%]==[MSVC15Clang64] conda config --add channels conda-forge --force
- if [%BUILD_TYPE%]==[MSVC15Clang64] conda create -y --name mppp cmake ninja clangdev mpir mpfr
- if [%BUILD_TYPE%]==[MSVC15Clang64] call activate mppp
- if [%BUILD_TYPE%]==[MSVC15Clang64] clang-cl -v
- if [%BUILD_TYPE%]==[MSVC15Clang64] call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64

# Same for MinGW.
- if [%COMPILER%]==[MinGW] set PATH=C:\mingw64\bin;%PATH%
- if [%COMPILER%]==[MinGW] call tools\appveyor-download.cmd https://github.com/bluescarni/binary_deps/raw/master/x86_64-6.2.0-release-posix-seh-rt_v5-rev1.7z
- if [%COMPILER%]==[MinGW] 7z x -oC:\ x86_64-6.2.0-release-posix-seh-rt_v5-rev1.7z > NUL
- if [%COMPILER%]==[MinGW] if [%PLATFORM%]==[x64] call tools\appveyor-download.cmd https://github.com/bluescarni/binary_deps/raw/master/gmp_mingw_64.7z
- if [%COMPILER%]==[MinGW] if [%PLATFORM%]==[x64] call tools\appveyor-download.cmd https://github.com/bluescarni/binary_deps/raw/master/mpfr_mingw_64.7z
- if [%COMPILER%]==[MinGW] if [%PLATFORM%]==[x64] 7z x -oC:\ gmp_mingw_64.7z > NUL
- if [%COMPILER%]==[MinGW] if [%PLATFORM%]==[x64] 7z x -oC:\ mpfr_mingw_64.7z > NUL
# Rename sh.exe as sh.exe in PATH interferes with MinGW.
- if [%COMPILER%]==[MinGW] rename "C:\Program Files\Git\usr\bin\sh.exe" "sh2.exe"

build_script:
- mkdir build
- cd build

- if [%COMPILER%]==[MSVC15] if [%PLATFORM%]==[Win32] cmake -G "Visual Studio 14 2015" -DMPPP_MSVC_STATIC_RUNTIME=YES -DMPPP_BUILD_TESTS=YES -DGMP_INCLUDE_DIR=C:/local/include -DGMP_LIBRARY=C:/local/lib/mpir.lib ..
- if [%COMPILER%]==[MSVC15] if [%PLATFORM%]==[x64] cmake -G "Visual Studio 14 2015 Win64" -DMPPP_MSVC_STATIC_RUNTIME=YES -DMPPP_BUILD_TESTS=YES -DGMP_INCLUDE_DIR=C:/local/include -DGMP_LIBRARY=C:/local/lib/mpir.lib ..
- if [%COMPILER%]==[MSVC15] cmake --build . --config %BUILD_TYPE% --target ALL_BUILD

- if [%BUILD_TYPE%]==[MSVC15Clang64] cmake .. -GNinja -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=Debug -DMPPP_BUILD_TESTS=yes -DMPPP_WITH_LONG_DOUBLE=yes
- if [%BUILD_TYPE%]==[MSVC15Clang64] cmake --build . --config Debug

- if [%COMPILER%]==[MinGW] if [%PLATFORM%]==[x64] cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=%BUILD_TYPE% -DMPPP_BUILD_TESTS=YES -DMPPP_WITH_LONG_DOUBLE=YES -DGMP_INCLUDE_DIR=C:/local/include -DGMP_LIBRARY=C:/local/lib/libgmp.a -DMPFR_INCLUDE_DIR=C:/local/include -DMPFR_LIBRARY=C:/local/lib/libmpfr.a ..
#- if [%COMPILER%]==[MinGW] cmake --build . --config %BUILD_TYPE% --target all
- if [%COMPILER%]==[MinGW] mingw32-make -j2 VERBOSE=1

test_script:
- ctest -V

# Enable this to be able to login to the build worker. You can use the
# `remmina` program in Ubuntu, use the login information that the line below
# prints into the log.
# on_finish:
# - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
